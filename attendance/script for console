javascript:(function(){
  // Add function to import attendance data from clipboard
  function importAttendanceFromClipboard() {
    // Create a dialog to prompt user to paste the data
    const dialog = document.createElement('div');
    dialog.style.position = 'fixed';
    dialog.style.top = '0';
    dialog.style.left = '0';
    dialog.style.right = '0';
    dialog.style.bottom = '0';
    dialog.style.backgroundColor = 'rgba(0,0,0,0.7)';
    dialog.style.zIndex = '10000';
    dialog.style.display = 'flex';
    dialog.style.justifyContent = 'center';
    dialog.style.alignItems = 'center';
    
    dialog.innerHTML = `
      <div style="background: white; padding: 20px; border-radius: 8px; max-width: 500px; width: 90%;">
        <h2 style="margin-top: 0; color: #3949ab;">Import Attendance Data</h2>
        <p>Paste the attendance data exported from the Attendance app:</p>
        <textarea id="clipboardDataInput" style="width: 100%; height: 150px; margin: 10px 0; padding: 10px; border-radius: 4px; border: 1px solid #ccc;" 
            placeholder="Paste JSON data here..."></textarea>
        <div style="display: flex; justify-content: space-between; margin-top: 20px;">
          <button id="importClipboardBtn" style="background: #3949ab; color: white; border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer;">
            Import
          </button>
          <button id="cancelClipboardImportBtn" style="background: #f44336; color: white; border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer;">
            Cancel
          </button>
        </div>
      </div>
    `;
    
    document.body.appendChild(dialog);
    
    // Try to read from clipboard automatically if possible
    if (navigator.clipboard && navigator.clipboard.readText) {
      navigator.clipboard.readText()
        .then(text => {
          document.getElementById('clipboardDataInput').value = text;
        })
        .catch(err => {
          console.warn('Could not automatically read clipboard:', err);
        });
    }
    
    // Handle import button
    document.getElementById('importClipboardBtn').addEventListener('click', () => {
      const jsonData = document.getElementById('clipboardDataInput').value;
      
      try {
        const data = JSON.parse(jsonData);
        
        // Verify this is a valid attendance data file
        if (!data.parameters || !data.attendance || !data.nameMap) {
          throw new Error("Missing required data in import data");
        }
        
        // Auto-fill the form with data from the file
        fillFormParameters(data.parameters);
        
        // Wait for form to update and generate checkboxes
        setTimeout(() => {
          processAttendance(data.attendance, data.nameMap, data.parameters.hours);
        }, 2000);
        
        console.log("Successfully imported attendance data");
        document.body.removeChild(dialog);
        
      } catch (error) {
        console.error("Import error:", error);
        alert("Error importing: " + error.message);
      }
    });
    
    // Handle cancel button
    document.getElementById('cancelClipboardImportBtn').addEventListener('click', () => {
      document.body.removeChild(dialog);
    });
  }

  // Function to import from localStorage
  function importFromLocalStorage() {
    // Get all keys from localStorage
    const allKeys = Object.keys(localStorage);
    
    // Filter for attendance log keys
    const logKeys = allKeys.filter(key => 
      key.startsWith('attendance_logs_') || 
      key.includes('attendance') || 
      key.includes('logs')
    );
    
    if (logKeys.length === 0) {
      alert('No attendance logs found in localStorage. Try using clipboard import instead.');
      return;
    }
    
    // Create dialog to show available logs
    const dialog = document.createElement('div');
    dialog.style.position = 'fixed';
    dialog.style.top = '0';
    dialog.style.left = '0';
    dialog.style.right = '0';
    dialog.style.bottom = '0';
    dialog.style.backgroundColor = 'rgba(0,0,0,0.7)';
    dialog.style.zIndex = '10000';
    dialog.style.display = 'flex';
    dialog.style.justifyContent = 'center';
    dialog.style.alignItems = 'center';
    
    dialog.innerHTML = `
      <div style="background: white; padding: 20px; border-radius: 8px; max-width: 500px; width: 90%; max-height: 80vh; overflow-y: auto;">
        <h2 style="margin-top: 0; color: #3949ab;">Available Attendance Logs</h2>
        <p>Select a stored log to import:</p>
        <div id="logsListContainer" style="margin: 15px 0;">
          ${logKeys.map(key => {
            let displayName = key;
            if (key.startsWith('attendance_logs_')) {
              displayName = key.replace('attendance_logs_', '');
            }
            const value = localStorage.getItem(key);
            const size = (value.length / 1024).toFixed(1);
            return `
              <div style="padding: 10px; margin: 5px 0; background: #f5f5f5; border-radius: 4px; cursor: pointer;" 
                  data-key="${key}" class="log-option">
                <strong>${displayName}</strong> (${size} KB)
              </div>
            `;
          }).join('')}
        </div>
        <button id="cancelLogSelectionBtn" style="background: #f44336; color: white; border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer; width: 100%;">
          Cancel
        </button>
      </div>
    `;
    
    document.body.appendChild(dialog);
    
    // Handle log selection
    dialog.querySelectorAll('.log-option').forEach(option => {
      option.addEventListener('click', () => {
        const key = option.getAttribute('data-key');
        try {
          // Get data from localStorage
          const logsData = JSON.parse(localStorage.getItem(key));
          
          // Show dialog to configure EIS import
          showImportParametersDialog(logsData, key);
          
          document.body.removeChild(dialog);
        } catch (error) {
          console.error("Error processing localStorage data:", error);
          alert("Could not process the selected data: " + error.message);
        }
      });
    });
    
    // Handle cancel button
    document.getElementById('cancelLogSelectionBtn').addEventListener('click', () => {
      document.body.removeChild(dialog);
    });
  }

  // Function to show import parameters dialog
  function showImportParametersDialog(logsData, courseName) {
    // Extract course name from key if needed
    if (courseName.startsWith('attendance_logs_')) {
      courseName = courseName.replace('attendance_logs_', '');
    }
    
    // Create dialog for parameter selection
    const dialog = document.createElement('div');
    dialog.style.position = 'fixed';
    dialog.style.top = '0';
    dialog.style.left = '0';
    dialog.style.right = '0';
    dialog.style.bottom = '0';
    dialog.style.backgroundColor = 'rgba(0,0,0,0.7)';
    dialog.style.zIndex = '10000';
    dialog.style.display = 'flex';
    dialog.style.justifyContent = 'center';
    dialog.style.alignItems = 'center';
    
    // Current date for default value
    const today = new Date().toISOString().split('T')[0];
    
    dialog.innerHTML = `
      <div style="background: white; padding: 20px; border-radius: 8px; max-width: 500px; width: 90%;">
        <h2 style="margin-top: 0; color: #3949ab;">Import "${courseName}" Attendance</h2>
        
        <div style="margin-bottom: 15px;">
          <label for="import-week" style="display: block; margin-bottom: 5px; font-weight: bold;">Week Number:</label>
          <select id="import-week" style="width: 100%; padding: 8px; border-radius: 4px; border: 1px solid #ccc;">
            ${Array.from({length: 14}, (_, i) => 
              `<option value="${i+1}">Week ${i+1}</option>`
            ).join('')}
          </select>
        </div>
        
        <div style="margin-bottom: 15px;">
          <label for="import-hours" style="display: block; margin-bottom: 5px; font-weight: bold;">Number of Hours:</label>
          <select id="import-hours" style="width: 100%; padding: 8px; border-radius: 4px; border: 1px solid #ccc;">
            ${Array.from({length: 10}, (_, i) => 
              `<option value="${i+1}" ${i+1 === 2 ? 'selected' : ''}>${i+1} hr${i+1 > 1 ? 's' : ''}</option>`
            ).join('')}
          </select>
        </div>
        
        <div style="margin-bottom: 15px;">
          <label for="import-category" style="display: block; margin-bottom: 5px; font-weight: bold;">Category:</label>
          <select id="import-category" style="width: 100%; padding: 8px; border-radius: 4px; border: 1px solid #ccc;">
            <option value="theory" selected>Theory</option>
            <option value="lab">Lab</option>
            <option value="practice">Practice</option>
          </select>
        </div>
        
        <div style="margin-bottom: 15px;">
          <label for="import-date" style="display: block; margin-bottom: 5px; font-weight: bold;">Date:</label>
          <input type="date" id="import-date" value="${today}" style="width: 100%; padding: 8px; border-radius: 4px; border: 1px solid #ccc;">
        </div>
        
        <div style="margin-bottom: 15px;">
          <label for="import-topic" style="display: block; margin-bottom: 5px; font-weight: bold;">Topic:</label>
          <input type="text" id="import-topic" value="Lecture" style="width: 100%; padding: 8px; border-radius: 4px; border: 1px solid #ccc;">
        </div>
        
        <div style="display: flex; justify-content: space-between; margin-top: 20px;">
          <button id="confirm-import-btn" style="background: #3949ab; color: white; border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer;">
            Import
          </button>
          <button id="cancel-import-btn" style="background: #f44336; color: white; border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer;">
            Cancel
          </button>
        </div>
      </div>
    `;
    
    document.body.appendChild(dialog);
    
    // Handle import button
    document.getElementById('confirm-import-btn').addEventListener('click', () => {
      const selectedDate = new Date(document.getElementById('import-date').value);
      selectedDate.setHours(0, 0, 0, 0); // Start of day
      
      const nextDay = new Date(selectedDate);
      nextDay.setDate(nextDay.getDate() + 1); // End at start of next day
      
      // Count logs by UID for the selected date
      const uidCounts = {};
      const nameMap = {}; // We'll collect names if they're stored in the logs
      
      // Handle different possible formats of stored logs
      if (Array.isArray(logsData)) {
        // Format 1: Array of log entries
        logsData.forEach(log => {
          const logDate = new Date(log.timestamp);
          
          if (logDate >= selectedDate && logDate < nextDay) {
            const uid = log.uid;
            uidCounts[uid] = (uidCounts[uid] || 0) + 1;
            
            // Collect name if available
            if (log.name) nameMap[uid] = log.name;
          }
        });
      } else if (logsData.logs && Array.isArray(logsData.logs)) {
        // Format 2: Object with logs array
        logsData.logs.forEach(log => {
          const logDate = new Date(log.timestamp);
          
          if (logDate >= selectedDate && logDate < nextDay) {
            const uid = log.uid;
            uidCounts[uid] = (uidCounts[uid] || 0) + 1;
            
            // Collect name if available
            if (log.name) nameMap[uid] = log.name;
          }
        });
      }
      
      // If we don't have names in the logs, try to get from nameMap if it exists
      if (Object.keys(nameMap).length === 0 && logsData.nameMap) {
        Object.assign(nameMap, logsData.nameMap);
      }
      
      // Create the data object for EIS
      const data = {
        parameters: {
          week: document.getElementById('import-week').value,
          hours: document.getElementById('import-hours').value,
          category: document.getElementById('import-category').value,
          date: document.getElementById('import-date').value,
          topic: document.getElementById('import-topic').value,
          course: courseName
        },
        attendance: uidCounts,
        nameMap: nameMap
      };
      
      // Fill the EIS form with this data
      fillFormParameters(data.parameters);
      
      // Wait for form to update and process attendance
      setTimeout(() => {
        processAttendance(data.attendance, data.nameMap, data.parameters.hours);
      }, 2000);
      
      document.body.removeChild(dialog);
    });
    
    // Handle cancel
    document.getElementById('cancel-import-btn').addEventListener('click', () => {
      document.body.removeChild(dialog);
    });
  }

  // Add buttons to the UI
  function addImportButtons() {
    const actionBar = document.querySelector('.record_actions');
    if (!actionBar) return;
    
    // Add clipboard import button
    const clipboardBtn = document.createElement('button');
    clipboardBtn.className = 'btn btn-primary';
    clipboardBtn.innerHTML = '<i class="fa fa-clipboard"></i> Import from Clipboard';
    clipboardBtn.onclick = importAttendanceFromClipboard;
    
    // Add localStorage import button
    const localStorageBtn = document.createElement('button');
    localStorageBtn.className = 'btn btn-info';
    localStorageBtn.innerHTML = '<i class="fa fa-database"></i> Import from Storage';
    localStorageBtn.onclick = importFromLocalStorage;
    
    // Ensure buttons are at the beginning of the action bar
    actionBar.insertBefore(localStorageBtn, actionBar.firstChild);
    actionBar.insertBefore(clipboardBtn, actionBar.firstChild);
  }

  // Add buttons when the script runs
  addImportButtons();
  console.log("Enhanced EIS import tools loaded!");
})();