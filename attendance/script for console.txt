javascript:(function(){
  // Configuration options
  const CONFIG = {
    // Set this to true if checkbox checked means ABSENT (inverts the logic)
    // Set this to false if checkbox checked means PRESENT
    checkedMeansAbsent: true
  };
  
  function importAttendance() {
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.accept = '.json';
    fileInput.style.display = 'none';
    document.body.appendChild(fileInput);
    
    fileInput.onchange = function(event) {
      const file = event.target.files[0];
      if (!file) {
        document.body.removeChild(fileInput);
        return;
      }
      
      const reader = new FileReader();
      reader.onload = function(e) {
        try {
          const data = JSON.parse(e.target.result);
          console.log("Parsed data:", data);
          
          if (!data.parameters || !data.attendance || !data.nameMap) {
            throw new Error("Missing required data in import file");
          }
          
          // Set form parameters
          fillFormParameters(data.parameters);
          
          // Wait for form to update and generate checkboxes
          setTimeout(() => {
            processAttendance(data.attendance, data.nameMap, data.parameters.hours);
          }, 2000);
          
        } catch (error) {
          console.error("Import error:", error);
          alert("Error importing: " + error.message);
        }
        document.body.removeChild(fileInput);
      };
      
      reader.readAsText(file);
    };
    
    fileInput.click();
  }
  
  function fillFormParameters(params) {
    // Fill form fields
    setFormValue("didcourseattendance_week", params.week);
    setFormValue("didcourseattendance_topicen", params.topic);
    setFormValue("didcourseattendance_categoryen", params.category);
    setFormValue("didcourseattendance_date", params.date);
    
    // Set hours last - this triggers checkbox generation
    setFormValue("didcourseattendance_nrhours", params.hours);
    
    // Force form submission to regenerate the page
    console.log("Form parameters filled, waiting for page update...");
  }
  
  function setFormValue(id, value) {
    const element = document.getElementById(id);
    if (!element) {
      console.warn(`Element not found: ${id}`);
      return false;
    }
    
    element.value = value;
    
    // Trigger appropriate event
    let eventType = "change";
    if (element.tagName === "INPUT" && element.type === "text") {
      eventType = "input";
    }
    
    const event = new Event(eventType, { bubbles: true });
    element.dispatchEvent(event);
    console.log(`Set ${id} to "${value}"`);
    return true;
  }
  
  function processAttendance(attendance, nameMap, numHours) {
    // We'll work with the existing form structure rather than resetting everything
    console.log("Starting attendance processing");
    
    // Now process each student row
    const rows = document.querySelectorAll("#student_list_table tbody tr");
    console.log(`Processing ${rows.length} student rows with ${numHours} hours`);
    
    let processed = 0;
    
    // Process each student row
    rows.forEach((row) => {
      // Get student name
      const nameCell = row.querySelector("td:nth-child(3)");
      if (!nameCell) return;
      
      // Get name without R/EX markers
      let fullName = nameCell.textContent.trim();
      let cleanName = fullName.replace(/\s+R\s+EX|\s+EX|\s+R|\s+\(R\)|\s+\(EX\)/g, "").trim();
      
      // Check if exempted
      const isExempted = row.querySelector("td[data-exempted='EX']");
      if (isExempted) {
        console.log(`Skipping exempted student: ${cleanName}`);
        return;
      }
      
      // Find UID for student
      let foundUid = null;
      for (const [uid, name] of Object.entries(nameMap)) {
        const mappedName = String(name).replace(/\s+R\s+EX|\s+EX|\s+R|\s+\(R\)|\s+\(EX\)/g, "").trim();
        if (mappedName.toLowerCase() === cleanName.toLowerCase()) {
          foundUid = uid;
          break;
        }
      }
      
      if (!foundUid) {
        console.log(`No UID found for: ${cleanName}`);
        return;
      }
      
              // Get attendance count
      const attendCount = attendance[foundUid] || 0;
      console.log(`${cleanName} (${foundUid}) attended ${attendCount} hours of ${numHours} total hours`);
      
      // Get hour checkboxes more reliably - the form structure shows they're in separate cells
      // First identify all checkboxes in the row
      const allRowCheckboxes = Array.from(row.querySelectorAll("input[type='checkbox']"));
      
      // The first checkbox is typically the "SELECT ALL" for this row, skip it
      // We only want the hour checkboxes which start from index 1
      const checkboxes = allRowCheckboxes.slice(1, 1 + parseInt(numHours));
      
      console.log(`Found ${checkboxes.length} hour checkboxes for ${cleanName} (need ${numHours})`);
      
      // If we don't have enough checkboxes, something is wrong
      if (checkboxes.length < numHours) {
        console.warn(`Expected ${numHours} hour checkboxes for ${cleanName}, but found ${checkboxes.length}`);
      }
      
      if (checkboxes.length === 0) {
        console.log(`No hour checkboxes found for ${cleanName}`);
        return;
      }
      
      // Process each hour checkbox
      for (let i = 0; i < checkboxes.length && i < numHours; i++) {
        const checkbox = checkboxes[i];
        const hourNumber = i + 1; // Hour numbers are 1-based
        // Determine if the hour should be marked as attended
        const isHourAttended = hourNumber <= attendCount;
        
        // Apply the configuration to determine checkbox state
        // If checkedMeansAbsent is true: checkbox should be checked when student is ABSENT
        // If checkedMeansAbsent is false: checkbox should be checked when student is PRESENT
        const shouldBeChecked = CONFIG.checkedMeansAbsent ? !isHourAttended : isHourAttended;
        
        // Force the checkbox to the correct state
        checkbox.checked = shouldBeChecked;
        
        // Create and dispatch a proper MouseEvent instead of just a change event
        // This better simulates an actual user click
        const clickEvent = new MouseEvent('click', {
          bubbles: true,
          cancelable: true,
          view: window
        });
        checkbox.dispatchEvent(clickEvent);
        
        // Also dispatch the change event for good measure
        const changeEvent = new Event('change', { bubbles: true });
        checkbox.dispatchEvent(changeEvent);
        
        console.log(`Set ${cleanName} hour ${hourNumber} to ${isHourAttended ? 'Present' : 'Absent'} (checkbox is ${shouldBeChecked ? 'checked' : 'unchecked'})`);
      }
      
      // Set the hidden values
      updateHiddenFields(row, numHours, attendCount, cleanName);
      
      // Mark row as updated
      row.classList.add('active');
      processed++;
    });
    
    console.log(`Attendance processed for ${processed} students`);
    alert(`Attendance updated for ${processed} students. Please review and click Save Changes.`);
  }
  
  function updateHiddenFields(row, numHours, attendCount, studentName) {
    // Set the hidden values for the form submission
    const checkboxCell = row.querySelector(".checkboxes_row_td");
    if (!checkboxCell) {
      console.log(`No checkbox cell found for ${studentName}`);
      return;
    }
    
    const rowIndex = checkboxCell.getAttribute("data-row");
    if (!rowIndex) {
      console.log(`No row index found for ${studentName}`);
      return;
    }
    
    // Find and set hidden fields
    const hourField = document.getElementById(`stdabsences_${rowIndex}_numofhours`);
    const checkedField = document.getElementById(`stdabsences_${rowIndex}_checked`);
    const updateField = document.getElementById(`stdabsences_${rowIndex}_update`);
    
    if (!hourField || !checkedField || !updateField) {
      console.log(`Missing hidden fields for ${studentName}`);
      return;
    }
    
    // Calculate hours absent
    const absentHours = Math.max(0, parseInt(numHours) - attendCount);
    
    // Build list of absent hours
    const absentList = [];
    for (let i = attendCount + 1; i <= numHours; i++) {
      absentList.push(i);
    }
    
    // Set values
    hourField.value = absentHours;
    checkedField.value = absentList.join(',');
    updateField.value = "1";
    
    console.log(`Updated hidden fields for ${studentName}: absent=${absentHours}, list=${absentList.join(',')}`);
  }
  
  // Add import button to the UI
  function addImportButton() {
    const actionBar = document.querySelector('.record_actions');
    if (!actionBar) return;
    
    const button = document.createElement('button');
    button.className = 'btn btn-info';
    button.innerHTML = '<i class="fa fa-file-import"></i> Import Attendance';
    button.onclick = importAttendance;
    
    actionBar.insertBefore(button, actionBar.firstChild);
  }
  
  // Run on load
  console.log("EIS Attendance Import Script loaded");
  addImportButton();
})();